#!/usr/bin/env python3
import argparse
import json
import os
from pathlib import Path
from cryptography.hazmat.primitives import hashes, hmac
from cryptography.hazmat.backends import default_backend
import base64

def gen_secrets(channels: list[int]) -> bytes:
    """
    Generate secure secrets file with channel-specific keys and MAC key.
    
    :param channels: List of channel numbers that will be valid in this deployment.
    :returns: Contents of the secrets file as bytes (JSON format).
    """
    # Generate master key (32 bytes for AES-256)
    master_key = os.urandom(32)
    
    # Derive channel-specific keys using HMAC-SHA256
    channel_keys = {}
    for channel in channels:
        h_obj = hmac.HMAC(master_key, hashes.SHA256(), backend=default_backend())
        h_obj.update(f"channel_{channel}".encode())
        channel_keys[channel] = h_obj.finalize()
    
    # Derive MAC key
    h_obj = hmac.HMAC(master_key, hashes.SHA256(), backend=default_backend())
    h_obj.update(b"mac_key")
    mac_key = h_obj.finalize()
    
    # Create secrets dictionary
    secrets = {
        "master_key": base64.b64encode(master_key).decode(),
        "channels": channels,
        "channel_keys": {
            str(ch): base64.b64encode(key).decode() for ch, key in channel_keys.items()
        },
        "mac_key": base64.b64encode(mac_key).decode()
    }
    
    return json.dumps(secrets).encode()

def write_secrets_header(secrets: dict, header_path: Path):
    """
    Generate a C header file containing the secrets.
    The header defines the master key, MAC key, and channel keys as constant strings.
    Definitions for CHANNEL_KEY_1 up to CHANNEL_KEY_8 are generated. If a channel key is missing,
    a dummy key (32 zero bytes) is used.
    """
    def dummy_key():
        return base64.b64encode(b'\x00' * 32).decode()
    
    lines = []
    lines.append("/* Autogenerated header from gen_secrets.py */")
    lines.append("#ifndef SECRETS_H")
    lines.append("#define SECRETS_H")
    lines.append("")
    lines.append('static const char MASTER_KEY_BASE64[] = "{}";'.format(secrets.get("master_key", "")))
    lines.append("")
    lines.append('static const char MAC_KEY_BASE64[] = "{}";'.format(secrets.get("mac_key", "")))
    lines.append("")
    for ch in range(1, 9):
        key = secrets.get("channel_keys", {}).get(str(ch), dummy_key())
        lines.append('static const char CHANNEL_KEY_{}[] = "{}";'.format(ch, key))
    lines.append("")
    lines.append("#endif // SECRETS_H")
    
    with open(header_path, "w") as f:
        f.write("\n".join(lines))

def parse_args():
    """
    Define and parse command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--force", "-f", action="store_true",
                        help="Force creation of secrets file, overwriting existing file")
    parser.add_argument("--header", type=Path,
                        help="Path to output header file (optional)")
    parser.add_argument("secrets_file", type=Path,
                        help="Path to the secrets file to be created")
    parser.add_argument("channels", nargs="+", type=int,
                        help="Supported channels. Channel 0 (broadcast) is always valid and will not be provided")
    return parser.parse_args()

def main():
    """Main function of gen_secrets."""
    args = parse_args()
    secrets_bytes = gen_secrets(args.channels)
    secrets = json.loads(secrets_bytes.decode())
    
    # Write JSON secrets file
    with open(args.secrets_file, "wb" if args.force else "xb") as f:
        f.write(secrets_bytes)
    print(f"Wrote secrets to {str(args.secrets_file.absolute())}")
    
    # If header output is requested, generate the header file
    if args.header:
        write_secrets_header(secrets, args.header)
        print(f"Wrote header to {str(args.header.absolute())}")

if __name__ == "__main__":
    main()
