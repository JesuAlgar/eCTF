import argparse
import struct
import json
import base64
import hmac
import hashlib
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

class Encoder:
    def __init__(self, secrets: bytes):
        """
        Initialize the Encoder with secrets.

        :param secrets: Contents of the secrets file generated by ectf25_design.gen_secrets.
        """
        # Load the JSON of the secrets file.
        secrets_dict = json.loads(secrets)
        
        # Load keys.
        self.master_key = base64.b64decode(secrets_dict["master_key"])
        self.channel_keys = {int(k): base64.b64decode(v) for k, v in secrets_dict["channel_keys"].items()}
        self.mac_key = base64.b64decode(secrets_dict["mac_key"])
        
        # Initialize sequence number tracking.
        self.seq_numbers = {}

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """
        Encode a frame with security measures.

        :param channel: 32-bit unsigned channel number.
        :param frame: Frame to encode. Maximum frame size is 64 bytes.
        :param timestamp: 64-bit timestamp to use for encoding.
        :returns: The encoded frame.
        """
        # Validate channel.
        if channel not in self.channel_keys and channel != 0:
            raise ValueError("Invalid channel")
        
        # Use emergency channel key if channel 0, otherwise use specific channel key.
        channel_key = self.channel_keys.get(channel, self.master_key)
        
        # Increment and get sequence number for this channel.
        seq_num = self.seq_numbers.get(channel, 0) + 1
        self.seq_numbers[channel] = seq_num
        
        # Create nonce from channel, timestamp, and sequence number.
        nonce = struct.pack("<IQQ", channel, timestamp, seq_num)
        
        # Perform AES-CTR encryption.
        cipher = Cipher(algorithms.AES(channel_key), modes.CTR(nonce), backend=default_backend())
        encryptor = cipher.encryptor()
        encrypted_frame = encryptor.update(frame.ljust(64, b'\0')) + encryptor.finalize()
        
        # Generate HMAC for authentication.
        h = hmac.new(self.mac_key, digestmod=hashlib.sha256)
        h.update(struct.pack("<IQ", channel, timestamp))
        h.update(encrypted_frame)
        frame_mac = h.digest()
        
        # Final packet structure: channel | timestamp | encrypted_frame | mac | seq_num.
        return struct.pack("<IQ", channel, timestamp) + encrypted_frame + frame_mac + struct.pack("<Q", seq_num)

def main():
    """A test main to one-shot encode a frame."""
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64-bit timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))

if __name__ == "__main__":
    main()
