import argparse
import json
import struct
import base64
import hmac
import hashlib
from pathlib import Path

def gen_subscription(secrets: bytes, device_id: int, start: int, end: int, channel: int) -> bytes:
    """
    Generate secure subscription contents.

    :param secrets: Contents of the secrets file generated by ectf25_design.gen_secrets.
    :param device_id: Device ID of the Decoder.
    :param start: First timestamp the subscription is valid for.
    :param end: Last timestamp the subscription is valid for.
    :param channel: Channel to enable.
    :returns: Subscription data as bytes.
    """
    # Load the JSON of the secrets file.
    secrets_dict = json.loads(secrets)
    
    # Get master key and channel-specific key.
    master_key = base64.b64decode(secrets_dict["master_key"])
    channel_keys = {int(k): base64.b64decode(v) for k, v in secrets_dict["channel_keys"].items()}
    mac_key = base64.b64decode(secrets_dict["mac_key"])
    
    # Validate channel.
    if channel not in secrets_dict["channels"]:
        raise ValueError("Invalid channel")
    
    # Generate HMAC for subscription validation.
    h = hmac.new(mac_key, digestmod=hashlib.sha256)
    h.update(struct.pack("<IQQI", device_id, start, end, channel))
    subscription_hmac = h.digest()
    
    # Pack the subscription with HMAC.
    return struct.pack("<IIQQQ", channel, device_id, start, end, int.from_bytes(subscription_hmac, 'little'))

def parse_args():
    """
    Define and parse command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--force", "-f", action="store_true",
                        help="Force creation of subscription file, overwriting existing file")
    parser.add_argument("secrets_file", type=argparse.FileType("rb"),
                        help="Path to the secrets file created by ectf25_design.gen_secrets")
    parser.add_argument("subscription_file", type=Path,
                        help="Subscription output file")
    parser.add_argument("device_id", type=lambda x: int(x, 0), help="Device ID of the update recipient.")
    parser.add_argument("start", type=lambda x: int(x, 0), help="Subscription start timestamp")
    parser.add_argument("end", type=int, help="Subscription end timestamp")
    parser.add_argument("channel", type=int, help="Channel to subscribe to")
    return parser.parse_args()

def main():
    """Main function of gen_subscription."""
    args = parse_args()
    subscription = gen_subscription(args.secrets_file.read(), args.device_id, args.start, args.end, args.channel)
    
    # Open the file, erroring if it exists unless --force is provided.
    with open(args.subscription_file, "wb" if args.force else "xb") as f:
        f.write(subscription)
    print(f"Wrote subscription to {str(args.subscription_file.absolute())}")

if __name__ == "__main__":
    main()
